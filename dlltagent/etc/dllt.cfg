{
  "service_domain_name":"3.84.210.233",
  "service_port":8080,
  "pcap_filter":"tcp port 80",
  "pcap_device":"eth0",
  "tls":true,
  "tls_ignore_server_certificate":false, 
  "ebpf":true,
  "agent_id":"5218ca2e-d93f-4492-88b0-00030567b850",
  "agent_id2":"e5482ae2-387d-4442-af77-0857e8f67ab1",
  
  //deployment_type = {"cloud", "local_nobackend", "local_backend"}
  //"cloud":cloud backend with support for further information gathering and correlation for higher level of RCA accuracy.
  //"local_nobackend": writes events in logfile, logfile can later be read manually or processed with other application.
  //"local_backend" : sends events to local backend running in docker image that can be pulled from docker hub.
  //Default is "cloud"
  //"tls", "tls_ignore_server_certificate", "service_domain_name" and "service_port" are ignored if deployment_type is "local_nobackend"
  "deployment_type":"cloud",
  
  //events_for_tls_connections is set to true if you want to generate an event for each tls connection that is established in the node
  //default is true
  //"events_for_tls_connections":true,
  
  //no_event_https_client_ssl_shutdown indicates we don't want events when an HTTPS client closes the SSL connection before it was established.
  //This is to avoid flooding of Alert events for close_notify in a machine running a browser
  //default is true
  //"no_event_https_client_ssl_shutdown":true
  
  //no_event_http_client_reset indicates we don't want events when an HTTP client resets the connection.
  //This is to avoid flooding of reset events in a machine running a browser
  //default is true
  //"no_event_http_client_reset":true
  
  "libpath":".",
  "ebpf_object_path":"/home/rodolk/work/ebpf",
  
  "example": {
    "service_domain_name":"a72c3e2msk.execute-api.us-west-2.amazonaws.com",
    "service_port":443,
    "pcap_filter":"tcp port 8080",
    "pcap_device":"eth0",
    "tls":true,
    "tls_ignore_server_certificate":true
  }
}

